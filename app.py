import streamlit as st
import requests
import os
import time
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –ø–æ–ª—É—á–∞–µ–º URL –±—ç–∫–µ–Ω–¥–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.getenv("BACKEND_URL")

def init_session():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é"""
    if "session_id" not in st.session_state:
        st.session_state.session_id = None
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []

def process_files(pdf_docs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PDF –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    if not pdf_docs:
        st.error("Please upload at least one PDF file")
        return
    
    files = [("files", (pdf.name, pdf.getvalue(), "application/pdf")) 
             for pdf in pdf_docs]
    
    try:
        with st.spinner("Processing PDFs..."):
            response = requests.post(
                f"{BACKEND_URL}/process",
                files=files,
                timeout=300  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
            )
            
        if response.status_code == 200:
            st.session_state.session_id = response.json()["session_id"]
            st.session_state.chat_history = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
            st.success("PDFs processed successfully! You can now ask questions.")
        else:
            st.error(f"Error: {response.json().get('detail', 'Unknown error')}")
    except requests.exceptions.Timeout:
        st.error("Processing timed out. Please try with smaller files.")
    except Exception as e:
        st.error(f"Connection failed: {str(e)}")

def handle_question(user_question):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
    if not st.session_state.session_id:
        st.error("Please upload and process PDFs first")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ —Å—Ä–∞–∑—É –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–≥–æ
    st.session_state.chat_history.append({
        "role": "user",
        "content": user_question
    })
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
    bot_message_placeholder = st.empty()
    bot_message_placeholder.markdown("‚ñå")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±—ç–∫–µ–Ω–¥—É
        response = requests.post(
            f"{BACKEND_URL}/ask",
            json={
                "session_id": st.session_state.session_id,
                "question": user_question
            },
            timeout=30
        )
        
        if response.status_code == 200:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
            bot_response = response.json()["chat_history"][-1]["content"]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            st.session_state.chat_history.append({
                "role": "assistant",
                "content": bot_response
            })
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç–∞
            bot_message_placeholder.markdown(bot_response)
        else:
            error_msg = f"Error: {response.json().get('detail', 'Unknown error')}"
            bot_message_placeholder.error(error_msg)
            st.session_state.chat_history.append({
                "role": "assistant",
                "content": error_msg
            })
            
    except requests.exceptions.Timeout:
        timeout_msg = "Request timed out. Please try again."
        bot_message_placeholder.error(timeout_msg)
        st.session_state.chat_history.append({
            "role": "assistant",
            "content": timeout_msg
        })
    except Exception as e:
        error_msg = f"Connection failed: {str(e)}"
        bot_message_placeholder.error(error_msg)
        st.session_state.chat_history.append({
            "role": "assistant",
            "content": error_msg
        })

def display_chat():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ —Å –ø–æ–º–æ—â—å—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ Streamlit"""
    for message in st.session_state.chat_history:
        if message["role"] == "user":
            with st.chat_message("user"):
                st.write(message["content"])
        else:
            with st.chat_message("assistant"):
                st.write(message["content"])

def main():
    st.set_page_config(
        page_title="Chat with your PDF", 
        page_icon=":books:",
        layout="centered"
    )
    
    init_session()
    
    st.title("üìö Chat with your PDF")
    st.caption("Upload PDF documents and ask questions about their content")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    display_chat()
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞
    if user_question := st.chat_input("Ask a question about your documents..."):
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É
        with st.chat_message("user"):
            st.write(user_question)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å (–æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ)
        handle_question(user_question)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    with st.sidebar:
        st.header("Document Management")
        st.subheader("Upload PDFs")
        
        pdf_docs = st.file_uploader(
            "Select PDF documents",
            accept_multiple_files=True,
            type="pdf",
            label_visibility="collapsed"
        )
        
        if st.button("Process Documents", use_container_width=True):
            process_files(pdf_docs)
        
        st.divider()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π BACKEND_URL –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        st.caption(f"Backend URL: `{BACKEND_URL}`")
        
        if st.session_state.session_id:
            st.success("Documents are processed and ready for questions")
        else:
            st.info("Upload PDFs and click 'Process Documents' to start")
        
        st.divider()
        st.caption("Note: Processing may take several minutes for large files")

if __name__ == "__main__":
    main()